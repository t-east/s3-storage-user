// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/usecases/port/content.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"
	entities "user/src/domains/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockContentCreateMetaDataputPort is a mock of ContentCreateMetaDataputPort interface.
type MockContentCreateMetaDataputPort struct {
	ctrl     *gomock.Controller
	recorder *MockContentCreateMetaDataputPortMockRecorder
}

// MockContentCreateMetaDataputPortMockRecorder is the mock recorder for MockContentCreateMetaDataputPort.
type MockContentCreateMetaDataputPortMockRecorder struct {
	mock *MockContentCreateMetaDataputPort
}

// NewMockContentCreateMetaDataputPort creates a new mock instance.
func NewMockContentCreateMetaDataputPort(ctrl *gomock.Controller) *MockContentCreateMetaDataputPort {
	mock := &MockContentCreateMetaDataputPort{ctrl: ctrl}
	mock.recorder = &MockContentCreateMetaDataputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentCreateMetaDataputPort) EXPECT() *MockContentCreateMetaDataputPortMockRecorder {
	return m.recorder
}

// GetKey mocks base method.
func (m *MockContentCreateMetaDataputPort) GetKey() (*entities.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey")
	ret0, _ := ret[0].(*entities.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey.
func (mr *MockContentCreateMetaDataputPortMockRecorder) GetKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockContentCreateMetaDataputPort)(nil).GetKey))
}

// Upload mocks base method.
func (m *MockContentCreateMetaDataputPort) Upload(content *entities.ContentCreateMetaData) (*entities.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", content)
	ret0, _ := ret[0].(*entities.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockContentCreateMetaDataputPortMockRecorder) Upload(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockContentCreateMetaDataputPort)(nil).Upload), content)
}

// MockContentOutputPort is a mock of ContentOutputPort interface.
type MockContentOutputPort struct {
	ctrl     *gomock.Controller
	recorder *MockContentOutputPortMockRecorder
}

// MockContentOutputPortMockRecorder is the mock recorder for MockContentOutputPort.
type MockContentOutputPortMockRecorder struct {
	mock *MockContentOutputPort
}

// NewMockContentOutputPort creates a new mock instance.
func NewMockContentOutputPort(ctrl *gomock.Controller) *MockContentOutputPort {
	mock := &MockContentOutputPort{ctrl: ctrl}
	mock.recorder = &MockContentOutputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentOutputPort) EXPECT() *MockContentOutputPortMockRecorder {
	return m.recorder
}

// Render mocks base method.
func (m *MockContentOutputPort) Render(arg0 *entities.Content, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Render", arg0, arg1)
}

// Render indicates an expected call of Render.
func (mr *MockContentOutputPortMockRecorder) Render(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockContentOutputPort)(nil).Render), arg0, arg1)
}

// RenderError mocks base method.
func (m *MockContentOutputPort) RenderError(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderError", arg0)
}

// RenderError indicates an expected call of RenderError.
func (mr *MockContentOutputPortMockRecorder) RenderError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderError", reflect.TypeOf((*MockContentOutputPort)(nil).RenderError), arg0)
}

// RenderKey mocks base method.
func (m *MockContentOutputPort) RenderKey(arg0 *entities.Key, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderKey", arg0, arg1)
}

// RenderKey indicates an expected call of RenderKey.
func (mr *MockContentOutputPortMockRecorder) RenderKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderKey", reflect.TypeOf((*MockContentOutputPort)(nil).RenderKey), arg0, arg1)
}

// MockContentCrypt is a mock of ContentCrypt interface.
type MockContentCrypt struct {
	ctrl     *gomock.Controller
	recorder *MockContentCryptMockRecorder
}

// MockContentCryptMockRecorder is the mock recorder for MockContentCrypt.
type MockContentCryptMockRecorder struct {
	mock *MockContentCrypt
}

// NewMockContentCrypt creates a new mock instance.
func NewMockContentCrypt(ctrl *gomock.Controller) *MockContentCrypt {
	mock := &MockContentCrypt{ctrl: ctrl}
	mock.recorder = &MockContentCryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentCrypt) EXPECT() *MockContentCryptMockRecorder {
	return m.recorder
}

// KeyGen mocks base method.
func (m *MockContentCrypt) KeyGen() (*entities.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyGen")
	ret0, _ := ret[0].(*entities.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyGen indicates an expected call of KeyGen.
func (mr *MockContentCryptMockRecorder) KeyGen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyGen", reflect.TypeOf((*MockContentCrypt)(nil).KeyGen))
}

// MakeMetaData mocks base method.
func (m *MockContentCrypt) MakeMetaData(contentCreateMetaDataput *entities.ContentCreateMetaData) (*entities.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeMetaData", contentCreateMetaDataput)
	ret0, _ := ret[0].(*entities.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeMetaData indicates an expected call of MakeMetaData.
func (mr *MockContentCryptMockRecorder) MakeMetaData(contentCreateMetaDataput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeMetaData", reflect.TypeOf((*MockContentCrypt)(nil).MakeMetaData), contentCreateMetaDataput)
}
